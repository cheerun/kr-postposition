{"version":3,"sources":["origin.js"],"names":["exports","DEFAULT_SYMBOL","open","close","symbol","merge","word","arguments","length","undefined","type","isUndefined","koreanStartChar","koreanLastChar","jongjangCycle","targetLetter","charCodeAt","getPostposition","parse","sentence","parseRegExp","RegExp","result","matches","exec","target","mergedWord","replace","getSymbol","setSymbol","openSymbol","closeSymbol","setOpenSymbol","setCloseSymbol","attach","hasJongjang","koreanYiCode","substring","variable","window"],"mappings":"cAAA,SAAEA,GACA,GAAMC,IADPC,KAAA,IACCC,MAAM,KAANC,GAMEF,KAAMD,EAAeC,KADvBC,MAAIF,EAASE,MAWbH,GAAQK,MAAQ,WAAqB,GAApBC,GAAoBC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAb,GAAaA,UAAA,GAATG,EAASH,UAAA,EACnC,IAAII,EAAYD,GADlB,MAAQJ,EAKN,IAAIM,GAAkB,MAJlBC,EAAJ,MACEC,EAAA,GACDC,EAAAT,EAAAU,WAAAV,EAAAE,OAAA,GAAAI,CAED,OAAIG,GAAA,GAAkBA,EAAOF,EAAAD,EACzBN,EAAAW,EAAwBP,GAAA,GAExBK,EAAeD,IAAgB,EAM1BR,EAAOW,EAAgBP,GAAM,GAH7BJ,EAAOW,EAAgBP,GAAM,IASxCV,EAAAkB,MAAA,SAAAC,GAKA,IACE,GAAMC,GAAc,GAAIC,QAAJ,MAAiBjB,EAAOF,KAAxB,MAAkCE,EAAOD,MAAzC,OAAqDC,EAAOD,MAAS,MAErFmB,EAASH,EACTI,EAAA,OAJEA,EAAQH,EAACI,KAAaF,IAAA,CAC5B,GAAMG,GAAAF,EAAkB,GAMlBjB,EAAOiB,EAAQ,GAJjBb,EAASa,EAAb,GACIG,EAAA1B,EAAJK,MAAAC,EAAAI,EACAY,GAAOA,EAAUK,QAAAF,EAAiBC,GAEhC,MAAIJ,IAGJtB,EAAA4B,UAAgB,WAAA,MAAAxB,IACjBJ,EAAA6B,UAAA,SAAAC,EAAAC,GACD/B,EAAOgC,cAAPF,GAZF9B,EAAAiC,eAAAF,IAeA/B,EAAQgC,cAAY,WAAA,GAAAF,GAAAvB,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAAAN,EAAAC,KAAAK,UAAA,EAAAH,GAAMF,KAAN,KAAA4B,GACpB9B,EAAQiC,eAAY,WAA6B,GAA7BF,GAA6BxB,UAAAC,QAAA,GAAAC,SAAAF,UAAA,GAA7BN,EAA6BE,MAAAI,UAAA,EAC/CH,GAAAD,MAAA,KAAQ4B,GAMV/B,EAAQkC,OAAAlC,EAAiBK,KAWzB,IAAMY,GAAkB,SAACP,EAAMyB,GAV7B,GAAAC,GAAA,KADF,QAAA1B,GAcI,IAAK,IATT,IAAA,IAWM,MAAOyB,GAAc,IAAM,GAC7B,KAAK,IACL,IAAK,IATT,MAAQA,GAAiB,IAAzB,GAWI,KAAK,IATH,IAAA,IACA,MAAAA,GAAJ,IAA0B,GAC1B,KAAA,IACE,IAAK,IACL,MAAAA,GAAA,IAAA,GACE,KAAA,IACF,IAAK,IACL,MAAAA,GAAA,IAAA,GACE,KAAA,KACF,IAAK,IACL,MAAAA,GAAA,KAAA,GACE,KAAA,KACF,IAAK,IACL,MAAAA,GAAA,KAAA,GACE,KAAA,KACF,IAAK,IACL,MAAAA,GAAA,KAAA,GACE,KAAA,MACF,IAAK,MACL,MAAAA,GAAA,MAAA,KACE,SACF,MAAKzB,GAALM,WAAA,KAAAoB,EACAD,EAAAzB,EAAAA,EAAA2B,UAAA,GAEAF,EAAA,IAAAzB,EAAAA,IAKEC,EAAO,SAAA2B,GAAA,MAAP,mBAA6BA,KAC/B,mBAAAtC,SAAAuC,OAAA,kBAAAvC","file":"kr-postposition.min.js","sourcesContent":["((exports) => {\n  const DEFAULT_SYMBOL = {\n    open: '{',\n    close: '}'\n  }\n\n  let symbol = {\n    open: DEFAULT_SYMBOL.open,\n    close: DEFAULT_SYMBOL.close\n  }\n\n  /**\n   * merge(word: any, type: string): string\n   * @param word\n   * @param type\n   * @returns string\n   */\n  exports.merge = (word = '', type) => {\n    if (isUndefined(type)) {\n      return word\n    }\n\n    let koreanStartChar = 0xAC00 // '가'\n    let koreanLastChar = 0XD7A3 // '힣'\n    let jongjangCycle = 28\n    let targetLetter = word.charCodeAt(word.length - 1) - koreanStartChar\n\n    if (targetLetter < 0 || targetLetter > (koreanLastChar - koreanStartChar)) {\n      return word + getPostposition(type, false)\n    }\n    if (targetLetter % jongjangCycle === 0) {\n      return word + getPostposition(type, false)\n    } else {\n      return word + getPostposition(type, true)\n    }\n  }\n\n  /**\n   * parse(sentence: any): string\n   * @param sentence\n   * @returns string\n   */\n  exports.parse = (sentence) => {\n    const parseRegExp = new RegExp(`(.)${symbol.open}([^${symbol.close}.]*)${symbol.close}`, 'gm')\n\n    let result = sentence\n    let matches\n    while (matches = parseRegExp.exec(result)) {\n      let target = matches[0]\n      let word = matches[1]\n      let type = matches[2]\n      let mergedWord = exports.merge(word, type)\n      result = result.replace(target, mergedWord)\n    }\n    return result\n  }\n\n  exports.getSymbol = () => symbol\n  exports.setSymbol = (openSymbol, closeSymbol) => {\n    exports.setOpenSymbol(openSymbol)\n    exports.setCloseSymbol(closeSymbol)\n  }\n  exports.setOpenSymbol = (openSymbol = DEFAULT_SYMBOL.open) => {\n    symbol.open = `\\\\${openSymbol}`\n  }\n  exports.setCloseSymbol = (closeSymbol = DEFAULT_SYMBOL.close) => {\n    symbol.close = `\\\\${closeSymbol}`\n  }\n\n\n  /**\n   * attach(word: any, type: string): string\n   * @deprecated - changed to merge(). Use merge() because it will be removed on v3.0.0\n   */\n  exports.attach = exports.merge\n\n  const getPostposition = (type, hasJongjang) => {\n    let koreanYiCode = 0xC774 // 이\n    switch (type) {\n      case '을':\n      case '를':\n        return hasJongjang ? '을' : '를'\n      case '이':\n      case '가':\n        return hasJongjang ? '이' : '가'\n      case '은':\n      case '는':\n        return hasJongjang ? '은' : '는'\n      case '과':\n      case '와':\n        return hasJongjang ? '과' : '와'\n      case '아':\n      case '야':\n        return hasJongjang ? '아' : '야'\n      case '이어':\n      case '여':\n        return hasJongjang ? '이어' : '여'\n      case '이었':\n      case '였':\n        return hasJongjang ? '이었' : '였'\n      case '으로':\n      case '로':\n        return hasJongjang ? '으로' : '로'\n      case '은커녕':\n      case '는커녕':\n        return hasJongjang ? '은커녕' : '는커녕'\n      default:\n        if(type.charCodeAt(0) === koreanYiCode) {\n          return hasJongjang ? type : type.substring(1)\n        } else {\n          return hasJongjang ? '이' + type : type\n        }\n    }\n  }\n\n  const isUndefined = variable => typeof variable === 'undefined'\n})(typeof exports === 'undefined' ? window[ 'krPostposition' ] = {} : exports);"],"sourceRoot":"/source/"}